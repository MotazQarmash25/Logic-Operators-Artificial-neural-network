/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.ai_project2;

import java.util.Arrays;
import java.util.List;
import javax.swing.JFrame;

/**
 *
 * @author Laptop Center
 */
public class Logic_Operators extends javax.swing.JFrame {

    /**
     * Creates new form Logic_Operators
     */
    public Logic_Operators() {
        initComponents();
    }
    
    
    double[][] inputs = { {0, 0}, {0, 1}, {1,0},{1,1} };
    
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("             Logic Operators");

        jButton1.setText("Not gate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("And gate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("OR gate");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Nor gate");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Nand gate");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Xor gate ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Xnor gate");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Number of Epoch :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(99, 99, 99)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

 
        // Example for AND gate
        
        double[] outputs = { 0,0,0,1};

        Perceptron perceptron = new Perceptron(2, 0.8);
        perceptron.train(inputs, outputs, 10000, 0.01);
    
    



          jLabel3.setText(  perceptron.epochs +"" );


        // Sample points with color values
        int[][] points = {
                {0, 0, 0}, 
                {0, 1, 0}, 
                {1, 0, 0}, 
                {1, 1, 1}  
        };

  
        List<double[]> lines = Arrays.asList(
                new double[] { perceptron.weights[0],  perceptron.weights[1],  perceptron.bias});// Line x - y = 0 (y = x)
             
        

        // Create the frame
        JFrame frame = new JFrame("classification Graph  for And gate");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        // Create and add the custom panel
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

        // Display the frame
        frame.setVisible(true);
    







        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
  
        
        double[] outputs = { 0,1,1,1};

        Perceptron perceptron = new Perceptron(2, 0.8);
        perceptron.train(inputs, outputs, 10000, 0.01);
      
    



          jLabel3.setText(  perceptron.epochs +"" );


        // Sample points with color values
        int[][] points = {
                {0, 0, 0}, 
                {0, 1, 1}, 
                {1, 0, 1}, 
                {1, 1, 1}  
        };

        // Define multiple lines with parameters {A, B, C}
        List<double[]> lines = Arrays.asList(
                new double[] { perceptron.weights[0],  perceptron.weights[1],  perceptron.bias});// Line x - y = 0 (y = x)
             
        

        // Create the frame
        JFrame frame = new JFrame("classification Graph for OR gate ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        // Create and add the custom panel
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

        // Display the frame
        frame.setVisible(true);
    

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      double[] outputs = { 1,0,0,0};

        Perceptron perceptron = new Perceptron(2, 0.8);
        perceptron.train(inputs, outputs, 10000, 0.01);
      
    



          jLabel3.setText(  perceptron.epochs +"" );


        // Sample points with color values
        int[][] points = {
                {0, 0, 1}, 
                {0, 1, 0}, 
                {1, 0, 0}, 
                {1, 1, 0}  
        };

        // Define multiple lines with parameters {A, B, C}
        List<double[]> lines = Arrays.asList(
                new double[] { perceptron.weights[0],  perceptron.weights[1],  perceptron.bias});// Line x - y = 0 (y = x)
             
        

        // Create the frame
        JFrame frame = new JFrame("classification Graph  for Nor gate");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        // Create and add the custom panel
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

        // Display the frame
        frame.setVisible(true);
    

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      double[] outputs = { 1,1,1,0};

        Perceptron perceptron = new Perceptron(2, 0.8);
        perceptron.train(inputs, outputs, 10000, 0.01);
     
    



          jLabel3.setText(  perceptron.epochs +"" );


        // Sample points with color values
        int[][] points = {
                {0, 0, 1}, 
                {0, 1, 1}, 
                {1, 0, 1}, 
                {1, 1, 0}  
        };

        // Define multiple lines with parameters {A, B, C}
        List<double[]> lines = Arrays.asList(
                new double[] { perceptron.weights[0],  perceptron.weights[1],  perceptron.bias});// Line x - y = 0 (y = x)
             
        

        // Create the frame
        JFrame frame = new JFrame("classification Graph for Nand gate ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        // Create and add the custom panel
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

        // Display the frame
        frame.setVisible(true);
    

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     double[] outputs = { 1,0};
 
    double[][] inputs1 = { {0, 0}, {1,1} };
        Perceptron perceptron = new Perceptron(2, 0.8);
        perceptron.train(inputs1, outputs, 10000, 0.01);
 
    



          jLabel3.setText(  perceptron.epochs +"" );


     
        int[][] points = {
                {0, 0, 1}, 
                {1, 1, 0}  
        };


        List<double[]> lines = Arrays.asList(
                new double[] { perceptron.weights[0],  perceptron.weights[1],  perceptron.bias});// Line x - y = 0 (y = x)
             
        

   
        JFrame frame = new JFrame("classification Graph for Not gate ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

  
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

   
        frame.setVisible(true);
    

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      
        NeuralNetwork nn = new NeuralNetwork();
        double[][] xorTargets = {{0}, {1},{1}, {0}  };
        nn.train(inputs, xorTargets);

  

     
        
        
        
          jLabel3.setText(  nn.epochs +"" );


     
        int[][] points = {
                {0, 0, 0}, 
                {0, 1, 1}, 
                {1, 0, 1}, 
                {1, 1, 0}  
        };

   
        List<double[]> lines = Arrays.asList(
                new double[] { nn.inputWeights[0][0],  nn.inputWeights[1][0] ,  nn.hiddenBiases[0] },
         new double[] { nn.inputWeights[0][1],  nn.inputWeights[1][1] ,  nn.hiddenBiases[1] }
        );
             
        

       
        JFrame frame = new JFrame("classification Graph for OR gate ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

     
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

     
        frame.setVisible(true);
    

        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
      
        NeuralNetwork nn = new NeuralNetwork();
        double[][] xorTargets = {{1}, {0},{0}, {1}  };
        nn.train(inputs, xorTargets);

        
     

    
        //System.out.println ("first "+nn.inputWeights[0][0] +"       "  + nn.inputWeights[1][0]                  + "      "+ nn.hiddenBiases[0]);
       // System.out.println ("second "+nn.inputWeights[0][1] +"       "  + nn.inputWeights[1][1]                  + "      "+ nn.hiddenBiases[1]);


     
        
        
        
          jLabel3.setText(  nn.epochs +"" );


        // Sample points with color values
        int[][] points = {
                {0, 0, 1}, 
                {0, 1, 0}, 
                {1, 0, 0}, 
                {1, 1, 1}  
        };

        // Define multiple lines with parameters {A, B, C}
        List<double[]> lines = Arrays.asList(
                new double[] { nn.inputWeights[0][0],  nn.inputWeights[1][0] ,  nn.hiddenBiases[0] },
         new double[] { nn.inputWeights[0][1],  nn.inputWeights[1][1] ,  nn.hiddenBiases[1] }
        );// Line x - y = 0 (y = x)
             
        

        // Create the frame
        JFrame frame = new JFrame("classification Graph for OR gate ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        // Create and add the custom panel
        GraphPanel panel = new GraphPanel(points, lines);
        frame.add(panel);

        // Display the frame
        frame.setVisible(true);
    

        
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Logic_Operators.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Logic_Operators.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Logic_Operators.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Logic_Operators.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Logic_Operators().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
